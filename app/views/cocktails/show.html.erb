<div class="row justify-content-center">




<div class="col-5">

    <div class="subtitle">
    </div>



  </div>
</div>


<div class="card-product">
   <div class="card-banner" style="background-image: url(<%= @cocktail.photo.attached? ? (cl_image_path @cocktail.photo.key) : (image_path("cocktail1.jpg")) %>), linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3))">
      <%= @cocktail.name %>
    </div>
  <div class="card-product-infos col-5">
    <h2>Ingredients</h2>
       <ul>
      <% @cocktail.doses.each do |dose| %>
       <li class="pt-3">
          <%= dose.ingredient.name %> - <%= dose.description %>
        </li>
      <% end %>
    </ul>
        <%= link_to 'Add Ingredient', new_cocktail_dose_path(@cocktail.id), class: "btn btn-outline-dark"  %>
         <%= link_to 'Delete', cocktail_path(@cocktail), method: :delete, class: "btn btn-outline-dark" %>
  </div>
</div>


<H1>CHART</H1>

<form>
  <div class="form-group">
    <label for="formControlRange">Example Range input</label>
    <input type="range" min="0" max="20"  class="form-control-range" id="formControlRange">
  </div>
</form>
<div>
  <p id="value" >10</p>
</div>

<canvas id="myChart" width="960" height="200"></canvas>
<canvas id="lineChart" width="960" height="200"></canvas>

<script>
  const range = document.getElementById('formControlRange')
  const value = document.getElementById('value')
  range.addEventListener('change', (e) => {
  value.innerHTML = range.value

  chartBar(parseInt(range.value, 10))
  lineChart(parseInt(range.value, 10))
})
  const chartBar = (val) => {
var ctx = document.getElementById('myChart');
var myChart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: ['Red', 'Blue', 'Yellow'],
    datasets: [{
      label: '# of Votes',
      data: [val, val + 2, val + 4 ],
      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],
      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true,
          max: 20
        }
      }]
    }
  }
});
}
const lineChart = (val) => {
  var ctx = document.getElementById('lineChart');
var myChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: ['Red', 'Blue', 'Yellow'],
    datasets: [{
      label: '# of Votes',
      data: [val, val + 2, val + 4 ],
      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],
      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true,
          max: 20
        }
      }]
    }
  }
});
}
</script>

















